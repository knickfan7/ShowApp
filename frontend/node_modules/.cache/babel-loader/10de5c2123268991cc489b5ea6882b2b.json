{"ast":null,"code":"import axios from \"axios\";\nimport { callbackify } from \"util\";\n\nclass UserAPI {\n  static async login(username, password, callback) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      username,\n      password\n    });\n\n    try {\n      await axios.post(\"http://127.0.0.1:8000/api/auth/logins/\", body, config).then(res => {\n        callback(res.data);\n      });\n    } catch (error) {\n      console.log(error.response);\n      callback(error.response.status);\n    }\n  }\n\n  static async register(username, email, password, callback) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      username,\n      email,\n      password\n    });\n\n    try {\n      await axios.post(\"http://127.0.0.1:8000/api/auth/register/\", body, config).then(res => {\n        callback(res.data);\n      });\n    } catch (error) {\n      console.log(error.response);\n      callback(error.response.status);\n    }\n  }\n\n  static async logout(token) {\n    try {\n      await axios.get(\"http://127.0.0.1:8000/api/auth/logout/\").then;\n    } catch (error) {\n      console.log(error.response);\n      callbackify(error.response.status);\n    }\n  }\n\n}\n\nUserAPI.tokenConfig = state => {\n  const token = state().auth.token;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};\n\nexport default UserAPI;","map":{"version":3,"sources":["D:/Github/ShowApp/frontend/src/api/userapi.tsx"],"names":["axios","callbackify","UserAPI","login","username","password","callback","config","headers","body","JSON","stringify","post","then","res","data","error","console","log","response","status","register","email","logout","token","get","tokenConfig","state","auth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,MAA5B;;AAEA,MAAMC,OAAN,CAAc;AACM,eAALC,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqBC,QAArB,EAA+B;AAC/C,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf,CAAb;;AACA,QAAI;AACF,YAAML,KAAK,CACRY,IADG,CACE,wCADF,EAC4CH,IAD5C,EACkDF,MADlD,EAEHM,IAFG,CAEGC,GAAD,IAAS;AACbR,QAAAA,QAAQ,CAACQ,GAAG,CAACC,IAAL,CAAR;AACD,OAJG,CAAN;AAKD,KAND,CAME,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAlB;AACAb,MAAAA,QAAQ,CAACU,KAAK,CAACG,QAAN,CAAeC,MAAhB,CAAR;AACD;AACF;;AAEoB,eAARC,QAAQ,CAACjB,QAAD,EAAWkB,KAAX,EAAkBjB,QAAlB,EAA4BC,QAA5B,EAAsC;AACzD,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAF;AAAYkB,MAAAA,KAAZ;AAAmBjB,MAAAA;AAAnB,KAAf,CAAb;;AACA,QAAI;AACF,YAAML,KAAK,CACRY,IADG,CACE,0CADF,EAC8CH,IAD9C,EACoDF,MADpD,EAEHM,IAFG,CAEGC,GAAD,IAAS;AACbR,QAAAA,QAAQ,CAACQ,GAAG,CAACC,IAAL,CAAR;AACD,OAJG,CAAN;AAKD,KAND,CAME,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAlB;AACAb,MAAAA,QAAQ,CAACU,KAAK,CAACG,QAAN,CAAeC,MAAhB,CAAR;AACD;AACF;;AAEkB,eAANG,MAAM,CAACC,KAAD,EAAQ;AACzB,QAAI;AACF,YAAMxB,KAAK,CAACyB,GAAN,CAAU,wCAAV,EAAoDZ,IAA1D;AACD,KAFD,CAEE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAlB;AACAlB,MAAAA,WAAW,CAACe,KAAK,CAACG,QAAN,CAAeC,MAAhB,CAAX;AACD;AACF;;AAhDW;;AAARlB,O,CAkDGwB,W,GAAeC,KAAD,IAAW;AAC9B,QAAMH,KAAK,GAAGG,KAAK,GAAGC,IAAR,CAAaJ,KAA3B;AAEA,QAAMjB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAMA,MAAIgB,KAAJ,EAAW;AACTjB,IAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAmC,SAAQgB,KAAM,EAAjD;AACD;;AACD,SAAOjB,MAAP;AACD,C;;AAGH,eAAeL,OAAf","sourcesContent":["import axios from \"axios\";\r\nimport { callbackify } from \"util\";\r\n\r\nclass UserAPI {\r\n  static async login(username, password, callback) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({ username, password });\r\n    try {\r\n      await axios\r\n        .post(\"http://127.0.0.1:8000/api/auth/logins/\", body, config)\r\n        .then((res) => {\r\n          callback(res.data);\r\n        });\r\n    } catch (error) {\r\n      console.log(error.response);\r\n      callback(error.response.status);\r\n    }\r\n  }\r\n\r\n  static async register(username, email, password, callback) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({ username, email, password });\r\n    try {\r\n      await axios\r\n        .post(\"http://127.0.0.1:8000/api/auth/register/\", body, config)\r\n        .then((res) => {\r\n          callback(res.data);\r\n        });\r\n    } catch (error) {\r\n      console.log(error.response);\r\n      callback(error.response.status);\r\n    }\r\n  }\r\n\r\n  static async logout(token) {\r\n    try {\r\n      await axios.get(\"http://127.0.0.1:8000/api/auth/logout/\").then \r\n    } catch (error) {\r\n      console.log(error.response);\r\n      callbackify(error.response.status)\r\n    }\r\n  }\r\n\r\n  static tokenConfig = (state) => {\r\n    const token = state().auth.token;\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n    return config;\r\n  };\r\n}\r\n\r\nexport default UserAPI;\r\n"]},"metadata":{},"sourceType":"module"}