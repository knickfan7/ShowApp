{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nexport function createUserStore() {\n  const setToken = async token => {\n    try {\n      await AsyncStorage.setItem(\"@token\", token);\n    } catch (e) {// saving error\n    }\n  };\n\n  const getToken = async () => {\n    try {\n      const value = await AsyncStorage.getItem(\"@token\");\n\n      if (value !== null) {\n        return value;\n      }\n    } catch (e) {}\n  };\n\n  const removeToken = async () => {\n    try {\n      await AsyncStorage.removeItem(\"@token\");\n    } catch (e) {// remove error\n    }\n  };\n\n  return {\n    state: {\n      isLoading: false,\n      isAuthenticated: false,\n      user: null,\n      token: getToken()\n    },\n\n    setState(state) {\n      this.state = state;\n    },\n\n    logoutState: {\n      isLoading: false,\n      isAuthenticated: false,\n      user: null,\n      token: null\n    },\n\n    //      localStorage.removeItem(\"token\");\n    setLogoutState() {\n      removeToken();\n      let logoutState = {\n        isLoading: false,\n        isAuthenticated: false,\n        user: null,\n        token: null\n      };\n      this.state = logoutState;\n    },\n\n    loginFail: {\n      isAuthenticated: false,\n      user: null,\n      token: null\n    },\n    loginSuccess: {\n      isLoading: false,\n      isAuthenticated: false,\n      user: null,\n      token: localStorage.getItem(\"token\")\n    },\n\n    setLoginState(user, token) {\n      setToken(user, token);\n      let loginState = {\n        isLoading: false,\n        isAuthenticated: true,\n        user: user,\n        token: token\n      };\n      this.state = loginState;\n    }\n\n  };\n}","map":{"version":3,"sources":["D:/Github/ShowApp/frontend/src/util/store/userstore.tsx"],"names":["AsyncStorage","createUserStore","setToken","token","setItem","e","getToken","value","getItem","removeToken","removeItem","state","isLoading","isAuthenticated","user","setState","logoutState","setLogoutState","loginFail","loginSuccess","localStorage","setLoginState","loginState"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AAEA,OAAO,SAASC,eAAT,GAA2B;AAChC,QAAMC,QAAQ,GAAG,MAAOC,KAAP,IAAiB;AAChC,QAAI;AACF,YAAMH,YAAY,CAACI,OAAb,CAAqB,QAArB,EAA+BD,KAA/B,CAAN;AAED,KAHD,CAGE,OAAOE,CAAP,EAAU,CACV;AACD;AACF,GAPD;;AASA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMP,YAAY,CAACQ,OAAb,CAAqB,QAArB,CAApB;;AACA,UAAID,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAOA,KAAP;AACD;AACF,KALD,CAKE,OAAOF,CAAP,EAAU,CAAE;AACf,GAPD;;AASA,QAAMI,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMT,YAAY,CAACU,UAAb,CAAwB,QAAxB,CAAN;AACD,KAFD,CAEE,OAAOL,CAAP,EAAU,CACV;AACD;AACF,GAND;;AAQA,SAAO;AACLM,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE,KADN;AAELC,MAAAA,eAAe,EAAE,KAFZ;AAGLC,MAAAA,IAAI,EAAE,IAHD;AAILX,MAAAA,KAAK,EAAEG,QAAQ;AAJV,KADF;;AAQLS,IAAAA,QAAQ,CAACJ,KAAD,EAAgB;AACtB,WAAKA,KAAL,GAAaA,KAAb;AACD,KAVI;;AAYLK,IAAAA,WAAW,EAAE;AACXJ,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,eAAe,EAAE,KAFN;AAGXC,MAAAA,IAAI,EAAE,IAHK;AAIXX,MAAAA,KAAK,EAAE;AAJI,KAZR;;AAkBL;AAEAc,IAAAA,cAAc,GAAG;AACfR,MAAAA,WAAW;AACX,UAAIO,WAAW,GAAG;AAChBJ,QAAAA,SAAS,EAAE,KADK;AAEhBC,QAAAA,eAAe,EAAE,KAFD;AAGhBC,QAAAA,IAAI,EAAE,IAHU;AAIhBX,QAAAA,KAAK,EAAE;AAJS,OAAlB;AAMA,WAAKQ,KAAL,GAAaK,WAAb;AACD,KA7BI;;AA+BLE,IAAAA,SAAS,EAAE;AACTL,MAAAA,eAAe,EAAE,KADR;AAETC,MAAAA,IAAI,EAAE,IAFG;AAGTX,MAAAA,KAAK,EAAE;AAHE,KA/BN;AAqCLgB,IAAAA,YAAY,EAAE;AACZP,MAAAA,SAAS,EAAE,KADC;AAEZC,MAAAA,eAAe,EAAE,KAFL;AAGZC,MAAAA,IAAI,EAAE,IAHM;AAIZX,MAAAA,KAAK,EAAEiB,YAAY,CAACZ,OAAb,CAAqB,OAArB;AAJK,KArCT;;AA4CLa,IAAAA,aAAa,CAACP,IAAD,EAAOX,KAAP,EAAc;AACzBD,MAAAA,QAAQ,CAACY,IAAD,EAAOX,KAAP,CAAR;AAGA,UAAImB,UAAU,GAAG;AACfV,QAAAA,SAAS,EAAE,KADI;AAEfC,QAAAA,eAAe,EAAE,IAFF;AAGfC,QAAAA,IAAI,EAAEA,IAHS;AAIfX,QAAAA,KAAK,EAAEA;AAJQ,OAAjB;AAMA,WAAKQ,KAAL,GAAaW,UAAb;AACD;;AAvDI,GAAP;AAyDD","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nexport function createUserStore() {\r\n  const setToken = async (token) => {\r\n    try {\r\n      await AsyncStorage.setItem(\"@token\", token);\r\n      \r\n    } catch (e) {\r\n      // saving error\r\n    }\r\n  };\r\n\r\n  const getToken = async () => {\r\n    try {\r\n      const value = await AsyncStorage.getItem(\"@token\");\r\n      if (value !== null) {\r\n        return value;\r\n      }\r\n    } catch (e) {}\r\n  };\r\n\r\n  const removeToken = async () => {\r\n    try {\r\n      await AsyncStorage.removeItem(\"@token\");\r\n    } catch (e) {\r\n      // remove error\r\n    }\r\n  };\r\n\r\n  return {\r\n    state: {\r\n      isLoading: false,\r\n      isAuthenticated: false,\r\n      user: null,\r\n      token: getToken(),\r\n    },\r\n\r\n    setState(state: Object) {\r\n      this.state = state;\r\n    },\r\n\r\n    logoutState: {\r\n      isLoading: false,\r\n      isAuthenticated: false,\r\n      user: null,\r\n      token: null,\r\n    },\r\n    //      localStorage.removeItem(\"token\");\r\n\r\n    setLogoutState() {\r\n      removeToken();\r\n      let logoutState = {\r\n        isLoading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n      };\r\n      this.state = logoutState;\r\n    },\r\n\r\n    loginFail: {\r\n      isAuthenticated: false,\r\n      user: null,\r\n      token: null,\r\n    },\r\n\r\n    loginSuccess: {\r\n      isLoading: false,\r\n      isAuthenticated: false,\r\n      user: null,\r\n      token: localStorage.getItem(\"token\"),\r\n    },\r\n\r\n    setLoginState(user, token) {\r\n      setToken(user, token);\r\n\r\n\r\n      let loginState = {\r\n        isLoading: false,\r\n        isAuthenticated: true,\r\n        user: user,\r\n        token: token,\r\n      };\r\n      this.state = loginState;\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}