{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nexport function createUserStore() {\n  const setToken = async token => {\n    try {\n      await AsyncStorage.setItem(\"@token\", token);\n    } catch (e) {// saving error\n    }\n  };\n\n  const getToken = async () => {\n    try {\n      const value = await AsyncStorage.getItem(\"@token\");\n\n      if (value !== null) {\n        return value;\n      }\n    } catch (e) {}\n  };\n\n  const removeToken = removeValue = async () => {\n    try {\n      await AsyncStorage.removeItem('@MyApp_key');\n    } catch (e) {// remove error\n    }\n\n    console.log('Done.');\n  };\n\n  return {\n    state: {\n      isLoading: false,\n      isAuthenticated: false,\n      user: null,\n      token: getToken()\n    },\n\n    setState(state) {\n      this.state = state;\n    },\n\n    logoutState: {\n      isLoading: false,\n      isAuthenticated: false,\n      user: null,\n      token: null\n    },\n\n    //      localStorage.removeItem(\"token\");\n    setLogoutState() {},\n\n    loginFail: {\n      isAuthenticated: false,\n      user: null,\n      token: null\n    },\n    loginSuccess: {\n      isLoading: false,\n      isAuthenticated: false,\n      user: null,\n      token: localStorage.getItem(\"token\")\n    },\n\n    setLoginState(user, token) {\n      setToken(token);\n      let loginState = {\n        isLoading: false,\n        isAuthenticated: true,\n        user: user,\n        token: token\n      };\n      this.state = loginState;\n    }\n\n  };\n}","map":{"version":3,"sources":["D:/Github/ShowApp/frontend/src/util/store/userstore.tsx"],"names":["AsyncStorage","createUserStore","setToken","token","setItem","e","getToken","value","getItem","removeToken","removeValue","removeItem","console","log","state","isLoading","isAuthenticated","user","setState","logoutState","setLogoutState","loginFail","loginSuccess","localStorage","setLoginState","loginState"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AAEA,OAAO,SAASC,eAAT,GAA2B;AAChC,QAAMC,QAAQ,GAAG,MAAOC,KAAP,IAAiB;AAChC,QAAI;AACF,YAAMH,YAAY,CAACI,OAAb,CAAqB,QAArB,EAA+BD,KAA/B,CAAN;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU,CACV;AACD;AACF,GAND;;AAQA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMP,YAAY,CAACQ,OAAb,CAAqB,QAArB,CAApB;;AACA,UAAID,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAOA,KAAP;AACD;AACF,KALD,CAKE,OAAOF,CAAP,EAAU,CAAE;AACf,GAPD;;AASA,QAAMI,WAAW,GAAGC,WAAW,GAAG,YAAY;AAC5C,QAAI;AACF,YAAMV,YAAY,CAACW,UAAb,CAAwB,YAAxB,CAAN;AACD,KAFD,CAEE,OAAMN,CAAN,EAAS,CACT;AACD;;AAEDO,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,GARD;;AAUA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE,KADN;AAELC,MAAAA,eAAe,EAAE,KAFZ;AAGLC,MAAAA,IAAI,EAAE,IAHD;AAILd,MAAAA,KAAK,EAAEG,QAAQ;AAJV,KADF;;AAQLY,IAAAA,QAAQ,CAACJ,KAAD,EAAgB;AACtB,WAAKA,KAAL,GAAaA,KAAb;AACD,KAVI;;AAYLK,IAAAA,WAAW,EAAE;AACXJ,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,eAAe,EAAE,KAFN;AAGXC,MAAAA,IAAI,EAAE,IAHK;AAIXd,MAAAA,KAAK,EAAE;AAJI,KAZR;;AAkBL;AAEAiB,IAAAA,cAAc,GAAG,CAGhB,CAvBI;;AAyBLC,IAAAA,SAAS,EAAE;AACTL,MAAAA,eAAe,EAAE,KADR;AAETC,MAAAA,IAAI,EAAE,IAFG;AAGTd,MAAAA,KAAK,EAAE;AAHE,KAzBN;AA+BLmB,IAAAA,YAAY,EAAE;AACZP,MAAAA,SAAS,EAAE,KADC;AAEZC,MAAAA,eAAe,EAAE,KAFL;AAGZC,MAAAA,IAAI,EAAE,IAHM;AAIZd,MAAAA,KAAK,EAAEoB,YAAY,CAACf,OAAb,CAAqB,OAArB;AAJK,KA/BT;;AAsCLgB,IAAAA,aAAa,CAACP,IAAD,EAAOd,KAAP,EAAc;AACzBD,MAAAA,QAAQ,CAACC,KAAD,CAAR;AAEA,UAAIsB,UAAU,GAAG;AACfV,QAAAA,SAAS,EAAE,KADI;AAEfC,QAAAA,eAAe,EAAE,IAFF;AAGfC,QAAAA,IAAI,EAAEA,IAHS;AAIfd,QAAAA,KAAK,EAAEA;AAJQ,OAAjB;AAMA,WAAKW,KAAL,GAAaW,UAAb;AACD;;AAhDI,GAAP;AAkDD","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nexport function createUserStore() {\r\n  const setToken = async (token) => {\r\n    try {\r\n      await AsyncStorage.setItem(\"@token\", token);\r\n    } catch (e) {\r\n      // saving error\r\n    }\r\n  };\r\n\r\n  const getToken = async () => {\r\n    try {\r\n      const value = await AsyncStorage.getItem(\"@token\");\r\n      if (value !== null) {\r\n        return value;\r\n      }\r\n    } catch (e) {}\r\n  };\r\n\r\n  const removeToken = removeValue = async () => {\r\n    try {\r\n      await AsyncStorage.removeItem('@MyApp_key')\r\n    } catch(e) {\r\n      // remove error\r\n    }\r\n  \r\n    console.log('Done.')\r\n  }\r\n\r\n  return {\r\n    state: {\r\n      isLoading: false,\r\n      isAuthenticated: false,\r\n      user: null,\r\n      token: getToken(),\r\n    },\r\n\r\n    setState(state: Object) {\r\n      this.state = state;\r\n    },\r\n\r\n    logoutState: {\r\n      isLoading: false,\r\n      isAuthenticated: false,\r\n      user: null,\r\n      token: null,\r\n    },\r\n    //      localStorage.removeItem(\"token\");\r\n\r\n    setLogoutState() {\r\n\r\n\r\n    },\r\n\r\n    loginFail: {\r\n      isAuthenticated: false,\r\n      user: null,\r\n      token: null,\r\n    },\r\n\r\n    loginSuccess: {\r\n      isLoading: false,\r\n      isAuthenticated: false,\r\n      user: null,\r\n      token: localStorage.getItem(\"token\"),\r\n    },\r\n\r\n    setLoginState(user, token) {\r\n      setToken(token);\r\n\r\n      let loginState = {\r\n        isLoading: false,\r\n        isAuthenticated: true,\r\n        user: user,\r\n        token: token,\r\n      };\r\n      this.state = loginState;\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}